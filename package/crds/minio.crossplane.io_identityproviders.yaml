---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: identityproviders.minio.crossplane.io
spec:
  group: minio.crossplane.io
  names:
    categories:
    - crossplane
    - minio
    kind: IdentityProvider
    listKind: IdentityProviderList
    plural: identityproviders
    singular: identityprovider
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: Synced
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: External Name
      type: string
    - jsonPath: .status.atProvider.displayName
      name: Display Name
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            properties:
              deletionPolicy:
                default: Delete
                description: |-
                  DeletionPolicy specifies what will happen to the underlying external
                  when this managed resource is deleted - either "Delete" or "Orphan" the
                  external resource.
                  This field is planned to be deprecated in favor of the ManagementPolicies
                  field in a future release. Currently, both could be set independently and
                  non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  claimName:
                    default: policy
                    description: |-
                      Specify the name of the JWT Claim MinIO uses to identify the policies to attach to the authenticated user.
                      The claim can contain one or more comma-separated policy names to attach to the user.
                      The claim must contain at least one policy for the user to have any permissions on the MinIO server.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#claim-name
                      Defaults to `policy` if unset.
                    type: string
                  claimUserInfo:
                    default: "off"
                    description: |-
                      Allow MinIO to fetch claims from the UserInfo Endpoint for the authenticated user.
                      Valid values are `on` or `off`.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#user-info
                      Defaults to `off` if unset.
                    type: string
                  clientId:
                    description: |-
                      Specify the unique public identifier MinIO uses when authenticating user credentials against the OIDC compatible provider.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#client-id
                    type: string
                  clientSecret:
                    description: |-
                      Specify the client secret MinIO uses when authenticating user credentials against the OIDC compatible provider. This field may be optional depending on the provider.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#client-secret
                      Mutually exclusive with `clientSecretRef`.
                    type: string
                  clientSecretRef:
                    description: |-
                      Specify the Secret name and namespace containing the client secret MinIO uses when authenticating user credentials against the OIDC compatible provider.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#client-secret
                      Mutually exclusive with `clientSecret`.
                    properties:
                      key:
                        description: The key to select.
                        type: string
                      name:
                        description: Name of the secret.
                        type: string
                      namespace:
                        description: Namespace of the secret.
                        type: string
                    required:
                    - key
                    - name
                    - namespace
                    type: object
                  configUrl:
                    description: |-
                      Specify the URL for the OIDC compatible provider discovery document.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#config-url
                    type: string
                  displayName:
                    description: |-
                      Specify the user-facing name the MinIO Console displays on the login screen.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#display-name
                    type: string
                  name:
                    description: |-
                      Name is the name of the identity provider to create.
                      Defaults to `metadata.name` if unset.
                    type: string
                  redirectUriDynamic:
                    default: "off"
                    description: |-
                      The MinIO Console defaults to using the hostname of the node making the authentication request as part of the redirect URI provided to the OIDC provider. For MinIO deployments behind a load balancer using a round-robin protocol, this may result in the load balancer returning the response to a different MinIO Node than the originating client.
                      Specify this option as `on` to direct the MinIO Console to use the Host header of the originating request to construct the redirect URI passed to the OIDC provider.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#dynamic-uri-redirect
                      Defaults to `off`.
                    type: string
                  redirectUrl:
                    description: |-
                      Specify the Fully Qualified Domain Name (FQDN) the MinIO Console listens for incoming connections on.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/console.html#envvar.MINIO_BROWSER_REDIRECT_URL
                    type: string
                  scopes:
                    default: openid,profile,email
                    description: |-
                      Scopes specify a comma-separated list of scopes.
                      See: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html#scopes
                      Defaults to `openid,profile,email` if unset.
                    type: string
                type: object
              managementPolicies:
                default:
                - '*'
                description: |-
                  THIS IS A BETA FIELD. It is on by default but can be opted out
                  through a Crossplane feature flag.
                  ManagementPolicies specify the array of actions Crossplane is allowed to
                  take on the managed and external resources.
                  This field is planned to replace the DeletionPolicy field in a future
                  release. Currently, both could be set independently and non-default
                  values would be honored if the feature flag is enabled. If both are
                  custom, the DeletionPolicy field will be ignored.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
                items:
                  description: |-
                    A ManagementAction represents an action that the Crossplane controllers
                    can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: |-
                  ProviderConfigReference specifies how the provider that will be used to
                  create, observe, update, and delete this managed resource should be
                  configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: |-
                          Resolution specifies whether resolution of this reference is required.
                          The default is 'Required', which means the reconcile will fail if the
                          reference cannot be resolved. 'Optional' means this reference will be
                          a no-op if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: |-
                          Resolve specifies when this reference should be resolved. The default
                          is 'IfNotPresent', which will attempt to resolve the reference only when
                          the corresponding field is not present. Use 'Always' to resolve the
                          reference on every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerReference:
                description: A Reference to a named object.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: |-
                          Resolution specifies whether resolution of this reference is required.
                          The default is 'Required', which means the reconcile will fail if the
                          reference cannot be resolved. 'Optional' means this reference will be
                          a no-op if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: |-
                          Resolve specifies when this reference should be resolved. The default
                          is 'IfNotPresent', which will attempt to resolve the reference only when
                          the corresponding field is not present. Use 'Always' to resolve the
                          reference on every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: |-
                  PublishConnectionDetailsTo specifies the connection secret config which
                  contains a name, metadata and a reference to secret store config to
                  which any connection details for this managed resource should be written.
                  Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: |-
                      SecretStoreConfigRef specifies which secret store config should be used
                      for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: |-
                          Annotations are the annotations to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.annotations".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: |-
                          Labels are the labels/tags to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      type:
                        description: |-
                          Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: |-
                  WriteConnectionSecretToReference specifies the namespace and name of a
                  Secret to which any connection details for this managed resource should
                  be written. Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                  This field is planned to be replaced in a future release in favor of
                  PublishConnectionDetailsTo. Currently, both could be set independently
                  and connection details would be published to both without affecting
                  each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            type: object
          status:
            properties:
              atProvider:
                properties:
                  claimName:
                    description: Name of the JWT Claim MinIO uses to identify the
                      policies to attach to the authenticated user.
                    type: string
                  claimUserInfo:
                    description: Allow MinIO to fetch claims from the UserInfo Endpoint
                      for the authenticated user.
                    type: string
                  clientId:
                    description: Unique public identifier MinIO uses when authenticating
                      user credentials against the OIDC compatible provider.
                    type: string
                  clientSecretHash:
                    description: Sha256 value of the client secret.
                    type: string
                  configUrl:
                    description: URL for the OIDC compatible provider discovery document.
                    type: string
                  displayName:
                    description: User-facing name the MinIO Console displays on the
                      login screen.
                    type: string
                  name:
                    description: Name of the identity provider.
                    type: string
                  redirectUriDynamic:
                    description: The MinIO Console defaults to using the hostname
                      of the node making the authentication request as part of the
                      redirect URI provided to the OIDC provider. For MinIO deployments
                      behind a load balancer using a round-robin protocol, this may
                      result in the load balancer returning the response to a different
                      MinIO Node than the originating client.
                    type: string
                  redirectUrl:
                    description: Fully Qualified Domain Name (FQDN) the MinIO Console
                      listens for incoming connections on.
                    type: string
                  scopes:
                    description: Comma-separated ist of scopes.
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        LastTransitionTime is the last time this condition transitioned from one
                        status to another.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        A Message containing details about this condition's last transition from
                        one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: |-
                        Type of this condition. At most one of each condition type may apply to
                        a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
